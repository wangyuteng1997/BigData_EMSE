MatCov<-cov(d, y = d, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
#Omi = x u
donnees <- d%*%VecteursPropres
Q<-(rowSums(donnees[,1:8]^2))
plot(Q,main = "", xlab = "Individus")
print(Q)
d<-scale(data1, center = TRUE, scale = FALSE) #donnee centree
#d<-scale(data1) #donnee normal
#question 4  valeur propre et vecteur propre
MatCov<-cov(d, y = d, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
#Omi = x u
donnees <- d%*%VecteursPropres
Q<-(rowSums(donnees[,1:8]^2))
plot(Q,main = "", xlab = "Individus")
print(Q)
boxplot(donnees,main="Visualisation des donnee projete", xlab="Axes de projections")
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
barplot(ValeursPropres/sum(ValeursPropres),main="Poids de chaque valeur propre dans le spectre",
xlab="Valeur Propre i",
ylab="Valeur Propre i/Somme des valeurs propres")
print(donnees2)
donnees2 <- d%*%VecteursPropres[,1:3]
print(donnees2)
donnees3 <- d%*%VecteursPropres[,1:5]
Q<-(rowSums(donnees3[,1:5]^2)/rowSums(donnees[,1:8]^2))
print(Q)
Y=matrix(data = NA,nrow = 26,ncol = 8)
for (j in 1:5){#5 premiers axes factoriels
Y[,j]<-(1/26)*(donnees3[,j]^2)/(ValeursPropres[j])
}
# 1 contribution
plot(1:26,Y[1:26,1],xlab="Individus",ylab="Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 2 contribution
plot(1:26,Y[1:26,2],xlab="Individus",ylab="Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 3 contribution
plot(1:26,Y[1:26,3],xlab="Individus",ylab="Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 4 contribution
plot(1:26,Y[1:26,4],xlab="Individus",ylab="Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 5 contribution
plot(1:26,Y[1:26,5],xlab="Individus",ylab="Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
Y=matrix(data = NA,nrow = 26,ncol = 8)
for (j in 1:5){#5 premiers axes factoriels
Y[,j]<-(1/26)*(donnees3[,j]^2)/(ValeursPropres[j])
}
# 1 contribution
plot(1:26,Y[1:26,1],xlab="Individus",ylab="k=1 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 2 contribution
plot(1:26,Y[1:26,2],xlab="Individus",ylab="k=2 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 3 contribution
plot(1:26,Y[1:26,3],xlab="Individus",ylab="k=3 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 4 contribution
plot(1:26,Y[1:26,4],xlab="Individus",ylab="k=4 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 5 contribution
plot(1:26,Y[1:26,5],xlab="Individus",ylab="k=5 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
Y=matrix(data = NA,nrow = 26,ncol = 8)
for (j in 1:5){#5 premiers axes factoriels
Y[,j]<-(1/26)*(donnees3[,j]^2)/(ValeursPropres[j])
}
# 1 contribution
plot(1:26,Y[1:26,1],xlab="Individus",ylab="k=1 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 2 contribution
plot(1:26,Y[1:26,2],xlab="Individus",ylab="k=2 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 3 contribution
plot(1:26,Y[1:26,3],xlab="Individus",ylab="k=3 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 4 contribution
plot(1:26,Y[1:26,4],xlab="Individus",ylab="k=4 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 5 contribution
plot(1:26,Y[1:26,5],xlab="Individus",ylab="k=5 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
Y=matrix(data = NA,nrow = 26,ncol = 8)
for (j in 1:5){#5 premiers axes factoriels
Y[,j]<-(1/26)*(donnees3[,j]^2)/(ValeursPropres[j])
}
# 1 contribution
plot(1:26,Y[1:26,1],xlab="Individus",ylab="k=1 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 2 contribution
plot(1:26,Y[1:26,2],xlab="Individus",ylab="k=2 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 3 contribution
plot(1:26,Y[1:26,3],xlab="Individus",ylab="k=3 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 4 contribution
plot(1:26,Y[1:26,4],xlab="Individus",ylab="k=4 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
# 5 contribution
plot(1:26,Y[1:26,5],xlab="Individus",ylab="k=5 Contribution de l'individu sur l'axe principal",
main="Contribution des individus sur l'axe principal")
R=matrix(data = NA,nrow = 8,ncol = 8)
# dans le cas de normal
#for (i in 1:8){
#  R[i,]<-sqrt(ValeursPropres[i])*VecteursPropres[,i]
#}
# dans le cas de centree
for (i in 1:8){
R[i,]<-sqrt(ValeursPropres[i]/MatCov[i,i])*VecteursPropres[,i]
}
plot(R[1,],R[2,],xlab="Composantes c",ylab="Variables initiales j",
main="Correlation lineaire entre une composante c et une variable j")
R=matrix(data = NA,nrow = 8,ncol = 8)
# dans le cas de normal
for (i in 1:8){
R[i,]<-sqrt(ValeursPropres[i])*VecteursPropres[,i]
}
# dans le cas de centree
#for (i in 1:8){
#R[i,]<-sqrt(ValeursPropres[i]/MatCov[i,i])*VecteursPropres[,i]
#}
plot(R[1,],R[2,],xlab="Composantes c",ylab="Variables initiales j",
main="Correlation lineaire entre une composante c et une variable j")
R=matrix(data = NA,nrow = 8,ncol = 8)
# dans le cas de normal
for (i in 1:8){
R[i,]<-sqrt(ValeursPropres[i])*VecteursPropres[,i]
}
# dans le cas de centree
#for (i in 1:8){
#R[i,]<-sqrt(ValeursPropres[i]/MatCov[i,i])*VecteursPropres[,i]
#}
plot(R[1,],R[2,],xlab="Composantes c",ylab="Variables initiales j",
main="Correlation lineaire entre une composante c et une variable j")
R=matrix(data = NA,nrow = 8,ncol = 8)
# dans le cas de normal
# for (i in 1:8){
#   R[i,]<-sqrt(ValeursPropres[i])*VecteursPropres[,i]
# }
# dans le cas de centree
for (i in 1:8){
R[i,]<-sqrt(ValeursPropres[i]/MatCov[i,i])*VecteursPropres[,i]
}
plot(R[1,],R[2,],xlab="Composantes c",ylab="Variables initiales j",
main="Correlation lineaire entre une composante c et une variable j")
R=matrix(data = NA,nrow = 8,ncol = 8)
# dans le cas de normal
# for (i in 1:8){
#   R[i,]<-sqrt(ValeursPropres[i])*VecteursPropres[,i]
# }
# dans le cas de centree
for (i in 1:8){
R[i,]<-sqrt(ValeursPropres[i]/MatCov[i,i])*VecteursPropres[,i]
}
plot(R[1,],R[2,],xlab="Composantes c",ylab="Variables initiales j",
main="Correlation lineaire entre une composante c et une variable j")
claer
clear
help(plot3d)
library(rgl)
install.packages("rgl")
library(rgl)
open3d()
plot3d(x, y, z)
nb.tirages <- 200
x <- rnorm(n=nb.tirages, mean=0, sd=1)
y <- rnorm(n=nb.tirages, mean=0, sd=1)
z <- rnorm(n=nb.tirages, mean=0, sd=1)
plot3d(x, y, z)
plot3d(x, y, z, col = rainbow(nb.tirages))
nb.tirages <- 200
X <- matrix(0,nb.tirages,3)
x <- rnorm(n=nb.tirages, mean=0, sd=1)
y <- rnorm(n=nb.tirages, mean=0, sd=1)
z <- rnorm(n=nb.tirages, mean=0, sd=1)
X[,1] <- x
X[,2] <- y
X[,3] <- z
View(X)
help("cov")
MatCov<-cov(X, y = X, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
print(cor(X))
ValeursPropres<-as.vector(r$values)
Correlation = cor(X)
donnees <- X%*%ValeursPropres
boxplot(donnees,main="Visualisation des donnee projete", xlab="Axes de projections")
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
barplot(ValeursPropres/sum(ValeursPropres),main="Poids de chaque valeur propre dans le spectre",
xlab="Valeur Propre i",
ylab="Valeur Propre i/Somme des valeurs propres")
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
barplot(ValeursPropres/sum(ValeursPropres),main="Poids de chaque valeur propre dans le spectre",
xlab="Valeur Propre i",
ylab="Valeur Propre i/Somme des valeurs propres")
boxplot(donnees,main="Visualisation des donnee projete", xlab="Axes de projections")
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
barplot(ValeursPropres/sum(ValeursPropres),main="Poids de chaque valeur propre dans le spectre",
xlab="Valeur Propre i",
ylab="Valeur Propre i/Somme des valeurs propres")
#question 1 Visualiser la matrice  de dimension (n,p)
data1<-read.table('data_PDE20.txt',header=TRUE)
plot(data1)
data1 <- data1[,-1]
data <- as.matrix(data1)
# dans le cas de centree
d<-scale(data1, center = TRUE, scale = FALSE) #donnee centree
#d<-scale(data1) #donnee normal
#question 4  valeur propre et vecteur propre
MatCov<-cov(d, y = d, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
#Omi = x u
donnees <- d%*%VecteursPropres
# question 5 l’inertie projetée totale
Q<-(rowSums(donnees[,1:8]^2))
plot(Q,main = "", xlab = "Individus")
print(Q)
print(apply(Q,1,sum))
print(sum(Q))
Q<-(rowSums(donnees[,1:8]^2))
plot(Q,main = "", xlab = "Individus")
IPT <- sum(Q)/26
Q<-(rowSums(donnees[,1:8]^2))
plot(Q,main = "", xlab = "Individus")
IPT <- sum(Q)/26
print(IPT)
#question 1 Visualiser la matrice  de dimension (n,p)
data1<-read.table('data_PDE20.txt',header=TRUE)
plot(data1)
data1 <- data1[,-1]
data <- as.matrix(data1)
# dans le cas de centree
#d<-scale(data1, center = TRUE, scale = FALSE) #donnee centree
d<-scale(data1) #donnee normal
#question 4  valeur propre et vecteur propre
MatCov<-cov(d, y = d, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
#Omi = x u
donnees <- d%*%VecteursPropres
# question 5 l’inertie projetée totale
Q<-(rowSums(donnees[,1:8]^2))
plot(Q,main = "", xlab = "Individus")
IPT <- sum(Q)/26
print(IPT)
View(VecteursPropres)
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
for (i in 2:8){
TauxInertie[i]<-TauxInertie[i-1]+ValeursPropres[i]/sum(ValeursPropres)
}
plot(0:8,c(0,TauxInertie[1:8]),xlim=c(0,8),ylim=c(0,1),
type="b",main="Taux d'inertie expliquÃ©e selon le nombre de valeurs propres retenues",
xlab="Nombre de valeurs propres retenues",
ylab="Taux d'inertie expliquÃ©e")
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
for (i in 2:8){
TauxInertie[i]<-TauxInertie[i-1]+ValeursPropres[i]/sum(ValeursPropres)
}
plot(0:8,c(0,TauxInertie[1:8]),xlim=c(0,8),ylim=c(0,1),
type="b",main="Taux d'inertie explique selon le nombre de valeurs propres retenues",
xlab="Nombre de valeurs propres retenues",
ylab="Taux d'inertie explique")
nb.tirages <- 200
X <- matrix(0,nb.tirages,3)
x <- rnorm(n=nb.tirages, mean=0, sd=1)
y <- rnorm(n=nb.tirages, mean=0, sd=1)
z <- rnorm(n=nb.tirages, mean=0, sd=1)
X[,1] <- x
X[,2] <- y
X[,3] <- z
library(rgl)
open3d()
plot3d(X[,1], X[,2], X[,3], col = rainbow(nb.tirages))
#  la matrice de covariance ou de corrélation
MatCov<-cov(X, y = X, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
Correlation <-  cor(X)
barplot(ValeursPropres/sum(ValeursPropres),main="Poids de chaque valeur propre dans le spectre",
xlab="Valeur Propre i",
ylab="Valeur Propre i/Somme des valeurs propres")
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
for (i in 2:3){
TauxInertie[i]<-TauxInertie[i-1]+ValeursPropres[i]/sum(ValeursPropres)
}
plot(0:2,c(0,TauxInertie[1:3]),xlim=c(0,3),ylim=c(0,1),
type="b",main="Taux d'inertie explique selon le nombre de valeurs propres retenues",
xlab="Nombre de valeurs propres retenues",
ylab="Taux d'inertie explique")
# la qualité de la projection des individus
#
print(TauxInertie[0])
print(TauxInertie[1])
plot(0:3,c(0,TauxInertie[1:3]),xlim=c(0,8),ylim=c(0,1),
type="b",main="Taux d'inertie explique selon le nombre de valeurs propres retenues",
xlab="Nombre de valeurs propres retenues",
ylab="Taux d'inertie explique")
print(TauxInertie[1:3])
print(TauxInertie[1:3])
plot(0:3,c(0,TauxInertie[1:3]),xlim=c(0,4),ylim=c(0,1),
type="b",main="Taux d'inertie explique selon le nombre de valeurs propres retenues",
xlab="Nombre de valeurs propres retenues",
ylab="Taux d'inertie explique")
print(TauxInertie[1:3])
plot(0:3,c(0,TauxInertie[1:3]),xlim=c(0,3.5),ylim=c(0,1),
type="b",main="Taux d'inertie explique selon le nombre de valeurs propres retenues",
xlab="Nombre de valeurs propres retenues",
ylab="Taux d'inertie explique")
nb.tirages <- 200
X <- matrix(0,nb.tirages,3)
x <- rnorm(n=nb.tirages, mean=0, sd=1)
y <- rnorm(n=nb.tirages, mean=0, sd=1)
z <- rnorm(n=nb.tirages, mean=0, sd=1)
X[,1] <- x
X[,2] <- y
X[,3] <- z
library(rgl)
open3d()
plot3d(X[,1], X[,2], X[,3], col = rainbow(nb.tirages))
#  la matrice de covariance ou de corrélation
MatCov<-cov(X, y = X, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
Correlation <-  cor(X)
#  la cascade des valeurs propres
## projection = x u
## Poids de chaque valeur propre
barplot(ValeursPropres/sum(ValeursPropres),main="Poids de chaque valeur propre dans le spectre",
xlab="Valeur Propre i",
ylab="Valeur Propre i/Somme des valeurs propres")
##Taux de inertie explique
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
for (i in 2:3){
TauxInertie[i]<-TauxInertie[i-1]+ValeursPropres[i]/sum(ValeursPropres)
}
plot(0:3,c(0,TauxInertie[1:3]),xlim=c(0,3.5),ylim=c(0,1),
type="b",main="Taux d'inertie explique selon le nombre de valeurs propres retenues",
xlab="Nombre de valeurs propres retenues",
ylab="Taux d'inertie explique")
donnees <- X%*%ValeursPropres[,1:2]
print(donnees[,1:2])
View(donnees)
nb.tirages <- 200
X <- matrix(0,nb.tirages,3)
x <- rnorm(n=nb.tirages, mean=0, sd=1)
y <- rnorm(n=nb.tirages, mean=0, sd=1)
z <- rnorm(n=nb.tirages, mean=0, sd=1)
X[,1] <- x
X[,2] <- y
X[,3] <- z
library(rgl)
open3d()
plot3d(X[,1], X[,2], X[,3], col = rainbow(nb.tirages))
#  la matrice de covariance ou de corrélation
MatCov<-cov(X, y = X, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
Correlation <-  cor(X)
#  la cascade des valeurs propres
## projection = x u
## Poids de chaque valeur propre
barplot(ValeursPropres/sum(ValeursPropres),main="Poids de chaque valeur propre dans le spectre",
xlab="Valeur Propre i",
ylab="Valeur Propre i/Somme des valeurs propres")
##Taux de inertie explique
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
for (i in 2:3){
TauxInertie[i]<-TauxInertie[i-1]+ValeursPropres[i]/sum(ValeursPropres)
}
plot(0:3,c(0,TauxInertie[1:3]),xlim=c(0,3.5),ylim=c(0,1),
type="b",main="Taux d'inertie explique selon le nombre de valeurs propres retenues",
xlab="Nombre de valeurs propres retenues",
ylab="Taux d'inertie explique")
# la qualité de la projection des individus
#
donnees <- X%*%ValeursPropres[,1:2]
print(donnees[,1:2])
donnees <- X%*%VecteursPropres[,1:2]
print(donnees[,1:2])
View(donnees)
Q<-(rowSums(donnees[,1:2]^2)/rowSums(donnees[,1:3]^2))
donnees <- X%*%VecteursPropres[,1:2]
donnees <- X%*%VecteursPropres
donnees2 <- X%*%VecteursPropres[,1:2]
print(donnees[,1:2])
Q<-(rowSums(donnees2[,1:2]^2)/rowSums(donnees[,1:3]^2))
print(Q)
print(rowSums(donnees2[,1:2]^2))
print(rowSums(donnees2[,1:2]^2))
View(donnees2)
print(rowSums(donnees2[,1:2]))
Q<-(rowSums(donnees2[,1:2]^2)/rowSums(donnees[,1:3]^2))
x1 <- sort(rnorm(1000))
y2 <- rnorm(1000)
z3 <- rnorm(1000) + atan2(x, y)
print(x1)
help(atan2)
x1 <- sort(rnorm(1000))
y2 <- rnorm(1000)
z3 <- rnorm(1000) + atan2(x, y)
X1[,1] <- x1
X1[,2] <- y1
X1[,3] <- z1
library(rgl)
open3d()
plot3d(X1[,1], X1[,2], X1[,3], col = rainbow(nb.tirages))
nb.tirages <- 1000
X <- matrix(0,nb.tirages,3)
x1 <- sort(rnorm(nb.tirages))
y2 <- rnorm(nb.tirages)
z3 <- rnorm(nb.tirages) + atan2(x, y)
X1[,1] <- x1
X1[,2] <- y1
X1[,3] <- z1
library(rgl)
open3d()
plot3d(X1[,1], X1[,2], X1[,3], col = rainbow(nb.tirages))
nb.tirages <- 1000
X1 <- matrix(0,nb.tirages,3)
x1 <- sort(rnorm(nb.tirages))
y2 <- rnorm(nb.tirages)
z3 <- rnorm(nb.tirages) + atan2(x, y)
X1[,1] <- x1
X1[,2] <- y1
X1[,3] <- z1
library(rgl)
open3d()
plot3d(X1[,1], X1[,2], X1[,3], col = rainbow(nb.tirages))
View(X1)
x1 <- sort(rnorm(nb.tirages))
y2 <- rnorm(nb.tirages)
nb.tirages <- 1000
X1 <- matrix(0,nb.tirages,3)
x1 <- sort(rnorm(nb.tirages))
y1 <- rnorm(nb.tirages)
z1 <- rnorm(nb.tirages) + atan2(x, y)
X1[,1] <- x1
X1[,2] <- y1
X1[,3] <- z1
library(rgl)
open3d()
plot3d(X1[,1], X1[,2], X1[,3], col = rainbow(nb.tirages))
nb.tirages <- 2000
X <- matrix(0,nb.tirages,3)
x <- rnorm(n=nb.tirages, mean=0, sd=1)
y <- rnorm(n=nb.tirages, mean=0, sd=1)
z <- rnorm(n=nb.tirages, mean=0, sd=1)
X[,1] <- x
X[,2] <- y
X[,3] <- z
library(rgl)
open3d()
plot3d(X[,1], X[,2], X[,3], col = rainbow(nb.tirages))
MatCov<-cov(X1, y = X1, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
Correlation <-  cor(X1)
barplot(ValeursPropres/sum(ValeursPropres),main="Poids de chaque valeur propre dans le spectre",
xlab="Valeur Propre i",
ylab="Valeur Propre i/Somme des valeurs propres")
TauxInertie=NULL
TauxInertie[1]<-ValeursPropres[1]/sum(ValeursPropres)
for (i in 2:3){
TauxInertie[i]<-TauxInertie[i-1]+ValeursPropres[i]/sum(ValeursPropres)
}
plot(0:3,c(0,TauxInertie[1:3]),xlim=c(0,3.5),ylim=c(0,1),
type="b",main="Taux d'inertie explique selon le nombre de valeurs propres retenues",
xlab="Nombre de valeurs propres retenues",
ylab="Taux d'inertie explique")
data1<-read.table('data_PDE20.txt',header=TRUE)
plot(data1)
data1 <- data1[,-1]
data <- as.matrix(data1)
# dans le cas de centree
#d<-scale(data1, center = TRUE, scale = FALSE) #donnee centree
d<-scale(data1) #donnee normal
#question 4  valeur propre et vecteur propre
MatCov<-cov(d, y = d, use = "everything", method = c("pearson", "kendall", "spearman"))
r<-eigen(MatCov)
VecteursPropres<-r$vectors
ValeursPropres<-as.vector(r$values)
View(data1)
View(data1)
colMeans(data1)
a <- colMeans(data1)
class(a)
View(d)
