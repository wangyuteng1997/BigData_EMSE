mu <- 1
sigma <- 3
nb.tirages <- 100
x.simu <- rnorm(n=nb.tirages, mean=mu, sd=sigma) # simulation
# Quartiles empiriques/expérimentaux calculés sur l'échantillon simulé
# et quantiles théoriques
q4.hat <- quantile(x.simu, probas=c(0.25,0.5,0.75))
print(round(q4.hat,2))
q4.theo <- qnorm(probas, mean=mu, sd=sigma)
q4.theo <- mu + sigma*qnorm(probas, mean=0, sd=1) # variante
print(round(q4.theo,2))
probas <- c(0.025, 0.25, 0.5, 0.75, 0.975)
q <- qnorm(probas, mean=0, sd=1) # quantiles théoriques : "q = quantile"
print(round(q,2))
mu <- 0     # moyenne
sigma <- 1  # écart-type = racine carrée de la variance
nb.tirages <- 100  # nombre de tirages aléatoires = taille échantillon simulé
# Utilisation du générateur de nombre normal rnorm : "r = random" et "norm = normal"
x.simu <- rnorm(n=nb.tirages, mean=mu, sd=sigma)
# Visualisation des données simulées
plot(1:nb.tirages, x.simu, xlab="Numéro de simulation", ylab="Simulations",
main="Simulations d'une loi normale")
abline(h=mu, lty=1, col="red", lwd=2)   # lty = line type (1 par défaut)
abline(h=1.96, lty=2, col="red", lwd=2) # lwd = line width (1 par défaut)
abline(h=-1.96, lty=2, col="red", lwd=2)
# Question 2
# Histogramme : on utilise breaks pour jouer sur le nombre de classes et l'option
# freq = FALSE pour le normaliser (densité de probabilité)
nb.tirages <- 20000
x.simu <- rnorm(n=nb.tirages, mean=mu, sd=sigma)
hist(x.simu, breaks=50, freq=FALSE, xlab="Valeurs simulées", ylab="Densité",
main="",ylim=c(0,0.7))
points(x.simu, rep(0,nb.tirages), pch='+', cex=0.5, col="blue") # cex = coeff. expansion
maxx = mu + 3.5*sigma
minx = mu - 3.5*sigma
x.grid <- seq(minx, maxx, 0.01)
fd <- dnorm(x.grid, mean=mu, sd=sigma) # dnorm pour densité normale : "d = density"
lines(x.grid, fd, col="red", lwd=2)
title("Histogramme et densité réelle")
probas <- c(0.025, 0.25, 0.5, 0.75, 0.975)
q <- qnorm(probas, mean=0, sd=1) # quantiles théoriques : "q = quantile"
print(round(q,2))
nb.tirages <- 20000
x.simu <- rnorm(n=nb.tirages, mean=mu, sd=sigma)
hist(x.simu, breaks=50, freq=FALSE, xlab="Valeurs simulées", ylab="Densité",
main="",ylim=c(0,0.7))
data <- c(1,2,3,4,5,6,7,8,9,10)
quantile(data,0.5)
data <- c(1,2,3,4,5,6,7,8,9,10)
quantile(data,0.1)
data <- c(1,2,3,4,5,6,7,8,9,10)
quantile(data,1)
mu <- 1
sigma <- 3
nb.tirages <- 100
x.simu <- rnorm(n=nb.tirages, mean=mu, sd=sigma) # simulation
# Quartiles empiriques/expérimentaux calculés sur l'échantillon simulé
# et quantiles théoriques
q4.hat <- quantile(x.simu, probas=c(0.25,0.5,0.75))
print(round(q4.hat,2))
q4.theo <- qnorm(probas, mean=mu, sd=sigma)
q4.theo <- mu + sigma*qnorm(probas, mean=0, sd=1) # variante
print(round(q4.theo,2))
q4.hat <- quantile(x.simu, probas=c(0.25,0.5,0.75))
print(round(q4.hat,2))
q4.theo <- qnorm(probas, mean=mu, sd=sigma)
print(round(q4.theo,2))
print(probas)
print(round(q4.hat,2))
q4.theo <- qnorm(probas, mean=mu, sd=sigma)
print(round(q4.theo,2))
q4.theo <- mu + sigma*qnorm(probas, mean=0, sd=1) # variante
print(round(q4.theo,2))
q4.theo <- qnorm(probas, mean=mu, sd=sigma)
print(round(q4.theo,2))
q4.theo1 <- mu + sigma*qnorm(probas, mean=0, sd=1) # variante
print(round(q4.theo1,2))
mu <- 1
sigma <- 3
nb.tirages <- 1000
x.simu <- rnorm(n=nb.tirages, mean=mu, sd=sigma) # simulation
probas <- seq(from=0.05, to=0.95, by=0.05)
q.theo <- qnorm(probas, mean=0, sd=1)
q.hat <- quantile(x.simu, probas)
plot(q.theo, q.hat, xlab="Quantiles théoriques N(0,1)", ylab="Quantiles expérimentaux")
abline(a=mu, b=sigma, col="red", lwd=2)
grid()
title("Droite de Henry")
q.theo <- qnorm(probas, mean=0, sd=1)
print(q.theo)
q.hat <- quantile(x.simu, probas)
print(q.hat)
qqnorm(x.simu); qqline(x.simu, col="red", lwd=2); grid()
probas <- seq(from=0.05, to=0.95, by=0.05)
q.theo <- qnorm(probas, mean=0, sd=1)
print(q.theo)
q.hat <- quantile(x.simu, probas)
print(q.hat)
plot(q.theo, q.hat, xlab="Quantiles théoriques N(0,1)", ylab="Quantiles expérimentaux")
abline(a=mu, b=sigma, col="red", lwd=2)
grid()
title("Droite de Henry")
qqnorm(x.simu); qqline(x.simu, col="red", lwd=2); grid()
qqnorm(x.simu); qqline(x.simu, col="red", lwd=2); grid()
qqnorm(x.simu)
setwd("F:/EMSE/3A/BIG Data/tp3 analyse donne/tp3")
data1<-read.csv('TP_AFC_majeur1718_travail.xls')
data1<-read.csv('Copy of TP_AFC_majeur1718_travail.csv.xls')
data1<-read.csv('TP_AFC_majeur1718_travail.csv')
View(data1)
data<-read.csv('TP_AFC_majeur1718_travail.csv')
summary(don)
data<-read.csv('TP_AFC_majeur1718_travail.csv')
summary(data)
res.test.chi2<- chisq.test(data)
help(chisq.test)
View(data)
res.test.chi2<- chisq.test(data)
View(data)
data_mat = data.metrix(data)
data_mat = apply(data, as.numeric)
data_mat = as.matrix(data[,1:4])
View(data_mat)
class(data_mat)
View(data)
View(data_mat)
View(data)
View(data_mat)
View(data)
View(data_mat)
res.test.chi2<- chisq.test(data_mat)
View(data_mat)
res.test.chi2<- chisq.test(data_mat[,2:3])
data_mat = as.matrix(data[,2:3])
View(data_mat)
res.test.chi2<- chisq.test(data_mat)
res.test.chi2<- chisq.test(data[,2:3])
res.test.chi2<- chisq.test(data)
res.test.chi2<- fisher.test(data)
help(CA)
install.packages("FactoMineR")
library("FactoMineR")
help(CA)
res.ca <- CA(data[,1:3])
res.ca <- CA(don[,1:3])sdwd
res.ca <- CA(data[,1:3])
print(res.ca)
res.ca <- CA(data[,1:3])
res.ca <- CA(data[,1:3],invisible="col")
library(FactoMineR)
res.ca <- CA(data[,1:3])
women_work=read.table("http://factominer.free.fr/classical-methods/datasets/women_work.txt", header=TRUE, row.names=1, sep="\t")
res.ca = CA(women_work[,1:3])
women_work=read.table("http://factominer.free.fr/classical-methods/datasets/women_work.txt", header=TRUE, row.names=1, sep="\t")
res.ca = CA(women_work[,1:3])
women_work=read.table("http://factominer.free.fr/classical-methods/datasets/women_work.txt", header=TRUE, row.names=1, sep="\t")
res.ca <- CA(data)
summary(don)
Don <- don
Don <- iris
View(data)
View(data)
test<-read.csv('TEST.csv')
View(test)
CA(test)
data(children)
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8)
View(children)
res.ca <- CA (children)
View(test)
res.ca<- CA(test,row.sup = 1:8, col.sup = 1:3)
res.ca<- CA(test,row.sup = 1:2, col.sup = 1:3)
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8)
View(children)
View(children)
View(test)
test<-read.csv('TEST.csv')
View(test)
test <- test[,-1]
View(test)
res.ca<- CA(test)
res.test.chi2<- chisq.test(test)
View(res.test.chi2)
temps <- data<-read.csv('temps de travaille.csv')
qualite <- data<-read.csv('qualite de la vie.csv')
View(qualite)
temps <- temps[,-1]
qualite <- qualite[,-1]
row.names(temps) <- c("fonction0","fonction1","fonction2","fonction3","fonction4","fonction5","fonction6","fonction7",)
names(temps) <- c("sex0","sex1","sex2")
View(temps)
row.names(temps) <- c("temps","fonction0","fonction1","fonction2","fonction3","fonction4","fonction5","fonction6","fonction7",)
row.names(temps) <- c("fonction0","fonction1","fonction2","fonction3","fonction4","fonction5","fonction6","fonction7")
View(temps)
res.temps<- CA(temps)
res.qualite<- CA(qualite)
row.names(qualite) <- c("fonction0","fonction1","fonction2","fonction3","fonction4","fonction5","fonction6","fonction7")
names(qualite) <- c("sex0","sex1","sex2")
res.qualite<- CA(qualite)
res.temps<- CA(temps)
res.qualite<- CA(qualite)
chisq.test(qualite)
View(res.temps)
data <- read.csv('TP_AFC_majeur1718_travail.csv')
View(data)
View(data)
dara <- data[,-1]
data <- data[,-1]
View(data)
data_PCA <- fun_PCA(data,reserve_ratio = 0.6)
data_qualite <- fun_Quality(data,data_PCA)
print(sum(data_qualite))
fun_PCA <- function(X, reserve_ratio=0.95){
# X: matrix of data
# reserve_ratio: the ratio of reserved information
# RETURN: Matrix after PCA process
MatrixCov <- cov(X)
# print(MatrixCov)
len_col <- ncol(X)
eig <- eigen(MatrixCov)
eigValues <- eig$values
eigVectors <- eig$vectors
print(eigValues)
eigValueCum_percent <- cumsum(eigValues) / sum(eigValues)
plot(eigValues, col='grey')
par(new=TRUE)
plot(eigValueCum_percent, ylim=c(0,1), type='s',
xaxt = "n", yaxt = "n",
main='Eigenvalues & Cumsum Percentage')
axis(side = 4)
abline(h=reserve_ratio, col = "red", lty=3)
mtext("Eigenvalues", side = 2)
mtext("Percentage(*100%)", side = 4)
for (i in 1:len_col) {
if(eigValueCum_percent[i] >= reserve_ratio){
k <- i
break
}
}
transMatrix <- cbind(eigVectors[,1:k])
Matrix_afterPCA <- X%*%transMatrix
return(Matrix_afterPCA)
}
fun_Quality <- function(X, X_PCA){
Q <- rowSums(X_PCA^2) / rowSums(X^2)
return(Q)
}
data_PCA <- fun_PCA(data,reserve_ratio = 0.6)
data_qualite <- fun_Quality(data,data_PCA)
print(sum(data_qualite))
data_PCA <- fun_PCA(data,reserve_ratio = 0.6)
View(fun_PCA)
data_PCA <- fun_PCA(data,reserve_ratio = 0.6)
data_PCA <- fun_PCA(data,reserve_ratio = 0.6)
data_PCA <- fun_PCA(data)
View(data)
data_PCA <- fun_PCA(data)
fun_PCA <- function(X, reserve_ratio=0.95){
# X: matrix of data
# reserve_ratio: the ratio of reserved information
# RETURN: Matrix after PCA process
MatrixCov <- cov(X)
# print(MatrixCov)
len_col <- ncol(X)
eig <- eigen(MatrixCov)
eigValues <- eig$values
eigVectors <- eig$vectors
print(eigValues)
eigValueCum_percent <- cumsum(eigValues) / sum(eigValues)
plot(eigValues, col='grey')
par(new=TRUE)
plot(eigValueCum_percent, ylim=c(0,1), type='s',
xaxt = "n", yaxt = "n",
main='Eigenvalues & Cumsum Percentage')
axis(side = 4)
abline(h=reserve_ratio, col = "red", lty=3)
mtext("Eigenvalues", side = 2)
mtext("Percentage(*100%)", side = 4)
for (i in 1:len_col) {
if(eigValueCum_percent[i] >= reserve_ratio){
k <- i
break
}
}
transMatrix <- cbind(eigVectors[,1:k])
Matrix_afterPCA <- X%*%transMatrix
return(Matrix_afterPCA)
}
fun_Quality <- function(X, X_PCA){
Q <- rowSums(X_PCA^2) / rowSums(X^2)
return(Q)
}
nb.tirages <- 2000
a <- rnorm(nb.tirages)
b <- rnorm(nb.tirages)
c <- rnorm(nb.tirages)
x <- sort(rnorm(nb.tirages))
y <- rnorm(nb.tirages)
z <- rnorm(nb.tirages) + atan2(x, y)
# espace de variable
X_Rp_iso <- cbind(a,b,c)
pcaResult_Rp_iso <- fun_PCA(X_Rp_iso,reserve_ratio = 0.6)
# print(pcaResult_Rp_non_iso)
Q_Rp_iso <- fun_Quality(X_Rp_iso,pcaResult_Rp_iso)
# print(Q_Rp_iso)
print(sum(Q_Rp_iso))
X_Rp_non_iso <- cbind(x,y,z)
pcaResult_Rp_non_iso <- fun_PCA(X_Rp_non_iso,reserve_ratio = 0.9)
# print(pcaResult_Rp_iso)
Q_Rp_non_iso <- fun_Quality(X_Rp_non_iso,pcaResult_Rp_non_iso)
# print(Q_Rp_non_iso)
print(sum(Q_Rp_non_iso))
# espace d'individu
X_Rn_iso <- rbind(a,b,c)
pcaResult_Rn_iso <- fun_PCA(X_Rn_iso)
print(pcaResult_Rn_iso)
Q_Rn_iso <- fun_Quality(X_Rn_iso, pcaResult_Rn_iso)
print(Q_Rn_iso)
print(sum(Q_Rn_iso))
View(X_Rp_iso)
class(X_Rn_iso)
data <- read.csv('TP_AFC_majeur1718_travail.csv')
data <- data[,-1]
data <- data.matrix(data)
class(data)
data_PCA <- fun_PCA(data)
View(data)
View(X_Rn_iso)
View(X_Rp_iso)
View(X_Rp_iso)
len_col <- ncol(data)
eig <- eigen(MatrixCov)
eigValues <- eig$values
eigVectors <- eig$vectors
print(eigValues)
MatrixCov <- cov(data)
data <- read.csv('TP_AFC_majeur1718_travail.csv')
data <- data[,-1]
MatrixCov <- cov(data)
View(MatrixCov)
View(data)
MatrixCov<-cov(data, y = data, use = "everything", method = c("pearson", "kendall", "spearman"))
MatrixCov<-cov(data, y = data, use = "everything", method = c("pearson", "kendall", "spearman"))
View(MatrixCov)
data <- data.matrix(data)
MatrixCov<-cov(data, y = data, use = "everything", method = c("pearson", "kendall", "spearman"))
# print(MatrixCov)
MatrixCov<-cov(data, y = data, use = "everything", method = c("pearson", "kendall", "spearman"))
# print(MatrixCov)
MatrixCov<-cov(data, y = data, use = "everything", method = c("pearson", "kendall", "spearman"))
# print(MatrixCov)
View(res.qualite)
fonction_qualite <- data<-read.csv('fonction_qualite.csv')
sex_qualite <- data<-read.csv('sex_qualite.csv')
sex_temps <- data<-read.csv('sex_temps.csv')
fonction_qualite <- fonction_qualite[,-1]
sex_qualite <- sex_qualite[,-1]
sex_temps <- sex_temps[,-1]
View(sex_temps)
View(sex_qualite)
View(sex_qualite)
View(fonction_qualite)
View(fonction_qualite)
View(fonction_qualite)
View(sex_temps)
row.names(fonction_qualite) <- c("qualite_99","qualite_16","qualite_4","qualite_2")
row.names(sex_temps) <- c("temps_99","temps_16","temps_8","temps_4","temps_2")
row.names(sex_qualite) <- c("qualite_99","qualite_16","qualite_4","qualite_2")
View(sex_temps)
View(sex_qualite)
View(sex_qualite)
View(fonction_qualite)
View(fonction_qualite)
res.fonction_qualite<- CA(fonction_qualite)
res.sex_qualite<- CA(sex_qualite)
res.sex_temps<- CA(sex_temps)
res.fonction_qualite<- CA(fonction_qualite)
res.fonction_qualite<- CA(fonction_qualite)
View(sex_temps)
View(res.sex_temps)
res.fonction_qualite<- CA(fonction_qualite)
res.sex_qualite<- CA(sex_qualite)
res.sex_qualite<- CA(sex_qualite)
res.sex_temps<- CA(sex_temps)
res.fonction_qualite<- CA(fonction_qualite)
res.sex_qualite<- CA(sex_qualite)
View(sex_temps)
res.sex_temps<- CA(sex_temps)
res.sex_temps<- CA(sex_temps)
res.sex_temps<- CA(sex_temps)
res.sex_temps<- CA(sex_temps)
res.sex_temps<- CA(sex_temps)
res.sex_temps<- CA(sex_temps)
res.fonction_qualite<- CA(fonction_qualite)
res.sex_qualite<- CA(sex_qualite)
fonction_qualite <- data<-read.csv('fonction_qualite.csv')
sex_qualite <- data<-read.csv('sex_qualite.csv')
sex_temps <- data<-read.csv('sex_temps.csv')
fonction_qualite <- fonction_qualite[,-1]
sex_qualite <- sex_qualite[,-1]
sex_temps <- sex_temps[,-1]
row.names(fonction_qualite) <- c("qualite_99","qualite_16","qualite_4","qualite_2")
row.names(sex_temps) <- c("temps_99","temps_16","temps_8","temps_4","temps_2")
row.names(sex_qualite) <- c("qualite_99","qualite_16","qualite_4","qualite_2")
res.fonction_qualite<- CA(fonction_qualite)
res.sex_qualite<- CA(sex_qualite)
res.sex_temps<- CA(sex_temps)
