}
par(mfrow = c(1, 1))
msobol <- fast99(model = f.fun, factors = 3, n = 1000,
q = "qunif", q.arg = list(min=-pi, max=pi))
plot(msobol)
View(X)
library(sensitivity)
# on pourra changer les valeurs de a et b
# dans le TP, a = 1 et b = 1
# autre fonction qui peut �tre int�ressante
f.fun <- function(X, a = 1/pi, b = 1/ pi^3) {
a * X[, 1] + cos(X[, 2]/2) + b * X[, 3]*X[, 1]^2
}
f.fun <- ishigami.fun
n <- 500
X <- data.frame(x1 = runif(n, min = -pi, max = pi),
x2 = runif(n, min = -pi, max = pi),
x3 = runif(n, min = -pi, max = pi))
z <- f.fun(X)
mu0 <- mean(z)
t <- seq(from=-pi, to=pi, length=200)
par(mfrow=c(3,2))
## attention aux valeurs de ylim
for (i in 1:3){
plot(z - mu0 ~ X[,i],
xlab=paste("X", i, sep=""),
ylab=expression(f(X)-mu[0]))
m.ss <- smooth.spline(X[,i], z-mu0)
lines(m.ss, lwd=3, col="blue")
plot(m.ss, lwd=2, col="blue", main = "Effet principal")
}
par(mfrow = c(1, 1))
msobol <- fast99(model = f.fun, factors = 3, n = 1000,
q = "qunif", q.arg = list(min=-pi, max=pi))
plot(msobol)
##partie 3 Domaine de définition de x1 et x2 : [-5, 5]
#Rayon de l'antenne : 1.5 (diamètre = 3)
#Territoire rectangulaire (de largeur 2 et de hauteur 10)
par(mfrow=c(3,2))
## attention aux valeurs de ylim
for (i in 1:3){
plot(z - mu0 ~ X[,i],
xlab=paste("X", i, sep=""),
ylab=expression(f(X)-mu[0]))
m.ss <- smooth.spline(X[,i], z-mu0)
lines(m.ss, lwd=3, col="blue")
plot(m.ss, lwd=2, col="blue", main = "Effet principal")
}
par(mfrow = c(1, 1))
msobol <- fast99(model = f.fun, factors = 3, n = 1000,
q = "qunif", q.arg = list(min=-pi, max=pi))
plot(msobol)
library(sensitivity)
# on pourra changer les valeurs de a et b
# dans le TP, a = 1 et b = 1
# autre fonction qui peut �tre int�ressante
poly2.fun <- function(X, b12, b11){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
plot(m, xlim = c(0, 3))
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
# autre fonction qui peut �tre int�ressant
b12 = 1
b11 = 1
poly2.fun <- function(X, b12, b11){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
plot(m, xlim = c(0, 3))
abs(-1)
help("morris")
library(sensitivity)
# on pourra changer les valeurs de a et b
# dans le TP, a = 1 et b = 1
#  fonction qui peut �tre int�ressant
#faites varier b12 et b11.
b12 = 1
b11 = 1
poly2.fun <- function(X, b12, b11){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
g.fun <- function (X, b12, b11){
abs(X[,1])
}
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
n <- morris(model = g.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
print(n)
plot(m, xlim = c(0, 3))
plot(n)
library(sensitivity)
# on pourra changer les valeurs de a et b
# dans le TP, a = 1 et b = 1
#  fonction qui peut �tre int�ressant
#faites varier b12 et b11.
b12 = 1
b11 = 1
poly2.fun <- function(X, b12, b11){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
g.fun <- function (X, b12, b11){
abs(X[,1])
}
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
n <- morris(model = g.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
print(n)
plot(m, xlim = c(0, 3))
plot(n,xlim = c(0, 3))
library(sensitivity)
# on pourra changer les valeurs de a et b
# dans le TP, a = 1 et b = 1
#  fonction qui peut �tre int�ressant
#faites varier b12 et b11.
b12 = 1
b11 = 1
poly2.fun <- function(X, b12, b11){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
g.fun <- function (X, b12, b11){
abs(X[,1])
}
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
n <- morris(model = g.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
print(n)
plot(m, xlim = c(0, 3))
plot(n,xlim = c(0, 3))
plot(n,xlim = c(0, 3),ylim = c(0, 3))
plot(m, xlim = c(0, 3))
plot(n,xlim = c(0, 3))
b12 = 1
b11 = 1
n <- 100
X <- data.frame(x1 = runif(n, min = -0.5, max = 0.5),
x2 = runif(n, min = -0.5, max = 0.5),
x3 = runif(n, min = -0.5, max = 0.5))
poly2.fun <- function(X, b12, b11){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
g.fun <- function (X, b12, b11){
abs(X[,1])
}
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
n <- morris(model = g.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
print(n)
plot(m, xlim = c(0, 3))
plot(n,xlim = c(0, 3))
msobol <- fast99(model = poly2.fun, factors = 3, n = 100,
q = "qunif", q.arg = list(min=-0.5, max=0.5))
plot(msobol)
help(fast99)
msobol <- fast99(model = poly2.fun, factors = 5, n = 100,
q = "qunif", q.arg = list(min=-0.5, max=0.5))
poly2.fun <- function(X, b12 = 1 , b11 = 1){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
g.fun <- function (X, b12 = 1 , b11 = 1){
abs(X[,1])
}
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
n <- morris(model = g.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 1),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
print(n)
plot(m, xlim = c(0, 3))
plot(n,xlim = c(0, 3))
par(mfrow = c(1, 1))
msobol <- fast99(model = poly2.fun, factors = 3, n = 100,
q = "qunif", q.arg = list(min=-0.5, max=0.5))
plot(msobol)
par(mfrow = c(1, 1))
msobol <- fast99(model = poly2.fun, factors = 3, n = 100,
q = "qunif", q.arg = list(min=-0.5, max=0.5))
plot(msobol)
n<-1000
X <- data.frame(x1 = runif(n, min = -pi, max = pi),
x2 = runif(n, min = -pi, max = pi),
x3 = runif(n, min = -pi, max = pi))
g <- ishigami.fun
par(mfrow = c(1, 1))
msobol <- fast99(model = g, factors = 3, n = 1000,
q = "qunif", q.arg = list(min=-pi, max=pi))
plot(msobol)
b12 = 10
b11 = 0
n <- 100
X <- data.frame(x1 = runif(n, min = -0.5, max = 0.5),
x2 = runif(n, min = -0.5, max = 0.5),
x3 = runif(n, min = -0.5, max = 0.5))
poly2.fun <- function(X, b12 = 1 , b11 = 1){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
g.fun <- function (X, b12 = 1 , b11 = 1){
abs(X[,1])
}
#question 2 Méthode de Morris :
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 3),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
#on visualise le même résultat que pour le cours avec les valeurs de b par défault correspondante
#b on fait de même pour la fonction g
n <- morris(model = g.fun, factors = 2, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 3),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
print(n)
plot(m, xlim = c(0, 3))
plot(n,xlim = c(0, 3))
#on peux voir que dans la méthode de Morris, X1 est la variable qui a le plus d'influence, suivie de près par X2 alors que dans la
#les indices de Sobol permettent de dire que X2 est plus influente, suivie par X1
#question 3 Indices de Sobol
par(mfrow = c(1, 1))
msobol <- fast99(model = poly2.fun, factors = 3, n = 100,
q = "qunif", q.arg = list(min=-0.5, max=0.5))
plot(msobol)
b12 = 10
b11 = 0
n <- 100
X <- data.frame(x1 = runif(n, min = -0.5, max = 0.5),
x2 = runif(n, min = -0.5, max = 0.5),
x3 = runif(n, min = -0.5, max = 0.5))
poly2.fun <- function(X, b12 = 1 , b11 = 1){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
g.fun <- function (X, b12 = 1 , b11 = 1){
abs(X[,1])
}
#question 2 Méthode de Morris :
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 3),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
#on visualise le même résultat que pour le cours avec les valeurs de b par défault correspondante
#b on fait de même pour la fonction g
n <- morris(model = g.fun, factors = 2, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 3),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
print(n)
plot(m, xlim = c(0, 3))
plot(n,xlim = c(0, 3))
#on peux voir que dans la méthode de Morris, X1 est la variable qui a le plus d'influence, suivie de près par X2 alors que dans la
#les indices de Sobol permettent de dire que X2 est plus influente, suivie par X1
#question 3 Indices de Sobol
par(mfrow = c(1, 1))
msobol <- fast99(model = poly2.fun, factors = 3, n = 100,
q = "qunif", q.arg = list(min=-0.5, max=0.5))
plot(msobol)
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 3),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
#on visualise le même résultat que pour le cours avec les valeurs de b par défault correspondante
#b on fait de même pour la fonction g
n <- morris(model = g.fun, factors = 2, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 3),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
print(n)
plot(m, xlim = c(0, 3))
poly2.fun <- function(X, b12 = 10 , b11 = 0){
X[,1] - 2*X[,2] + b12*X[,1]*X[,2] + b11*X[,1]^2
}
g.fun <- function (X, b12 = 10 , b11 = 0){
abs(X[,1])
}
#question 2 Méthode de Morris :
m <- morris(model = poly2.fun, factors = 3, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 3),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
#on visualise le même résultat que pour le cours avec les valeurs de b par défault correspondante
#b on fait de même pour la fonction g
n <- morris(model = g.fun, factors = 2, r = 4,
design = list(type = "oat",
levels = 5,
grid.jump = 3),
binf = -0.5, bsup = 0.5,
b12 = b12, b11 = b11)
print(m)
print(n)
plot(m, xlim = c(0, 3))
plot(n,xlim = c(0, 3))
plot(m, xlim = c(0, 5))
plot(n,xlim = c(0, 5))
par(mfrow = c(1, 1))
msobol <- fast99(model = poly2.fun, factors = 3, n = 100,
q = "qunif", q.arg = list(min=-0.5, max=0.5))
plot(msobol)
setwd("~/Desktop/bigdata/svm/FIL ROUGE/sensitivity")
load("doeBANDE.csv")
setwd("~/Desktop/bigdata")
setwd("~/Desktop/bigdata/sensibilite")
load("doeBANDE.csv")
read.csv("doeBANDE.csv",header = TRUE, sep = ";")
doeBANDE <- read.csv("doeBANDE.csv",header = TRUE, sep = ";")
meanX1 = apply(doeBANDE,1,mean)
meanX2 = apply(doeBANDE,2,mean)
print(meanX1)
View(doeBANDE)
colMeans(doeBANDE)
colmeans <- colMeans(doeBANDE)
µzero <- colmeans[2]
colmeans <- colMeans(doeBANDE)
µzero <- colmeans[2]
print(µzero)
µ0 <- colmeans[3]
help(s_tilde)
help(s_tilde)
help(s_tilde)
z<-s_tilde(doeBANDE)
library(DiceDesign)
library(DiceKriging)
z<-s_tilde(doeBANDE)
help(km)
#question 2
design <- doeBANDE[,1:2]
View(design)
View(design)
design <- doeBANDE[,1:2]
response <- doeBANDE[,3]
kmodel<-km(formula=~1, design, response, covtype="gauss",
coef.trend = NULL, coef.cov = NULL, coef.var = NULL,
nugget = NULL, nugget.estim=TRUE, noise.var=NULL, estim.method="MLE",
penalty = NULL, optim.method = "BFGS", lower = NULL, upper = NULL,
parinit = NULL, multistart = 1, control = NULL, gr = TRUE,
iso=FALSE, scaling=FALSE, knots=NULL, kernel=NULL)
xnew <- data.frame(date=c(x1=c(3,2,1),x2=c(2,3,4)))
View(xnew)
View(xnew)
xnew <- data.frame(x1=c(3,2,1),x2=c(2,3,4))
View(xnew)
xnew <- data.frame(x1=c(3,2,1),x2=c(2,3,4))
pre_simple <- predict(kmodel, xnew,"SK",checkNames = FALSE)
# kriging mean (including the trend) computed at newdate
m <- pre_simple$mean
kriging.mean(xnew,m)
kriging.mean <- function(Xnew, m){
predict(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean
}
kriging.mean(xnew,m)
help(fast99)
msobol <- fast99(model = kmodel, factors = 2, n = 20,
q = "qunif", q.arg = list(min=-5, max=5))
msobol <- fast99(model = kmodel, factors = 2, n = 100,
q = "qunif", q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5),
list(min = -5, max = 5)))
par(mfrow = c(1, 1))
msobol <- fast99(model = kmodel, factors = 2, n = 20,
q = "qunif", q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5),
list(min = -5, max = 5)))
msobol <- fast99(model = kmodel, factors = 2, n = 20,
q = "qunif", q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5),
))
par(mfrow = c(1, 1))
msobol <- fast99(model = kmodel, factors = 2, n = 20,
q = "qunif", q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5),
))
kmodelkmodelkmodel
par(mfrow = c(1, 1))
msobol <- fast99(model = kmodel, factors = 2, n = 20,
q = "qunif", q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5),
))
msobol <- fast99(model = kmodel, factors = 2, n = 20,
q = "qunif", q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5)
))
msobol <- fast99(model = kmodel, factors = 2, n = 20,
c("qunif","qunif"),, q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5)
))
msobol <- fast99(model = kmodel, factors = 2, n = 20,
c("qunif","qunif"),, q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5)
))
kriging.mean <- function(Xnew,kmodel ){
pre_simple <- predict(kmodel, xnew,"SK",checkNames = FALSE)
m <- pre_simple$mean
}
msobol <- fast99(model = kriging.mean, factors = 2, n = 20,
c("qunif","qunif"),, q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5)
))
msobol <- fast99(model = kriging.mean, factors = 2, n = 20,
c("qunif"),, q.arg = list(list(min = -5, max = 5),
list(min = -5, max = 5)
))
msobol <- fast99(model = kriging.mean, factors = 2, n = 20,
c("qunif"),, q.arg = list(min = -5, max = 5))
msobol <- fast99(model = kriging.mean, factors = 2, n = 20,
c("qunif"), q.arg = list(min = -5, max = 5))
kriging.mean(xnew,kmodel)
msobol <- fast99(model = kriging.mean, factors = 2, n = 20,
c("qunif"), q.arg = list(min = -5, max = 5))
msobol <- fast99(model = kriging.mean, factors = 2, n = 1000,
c("qunif"), q.arg = list(min = -5, max = 5))
msobol <- fast99(model = kriging.mean, factors = 3, n = 1000,
c("qunif"), q.arg = list(min = -5, max = 5))
msobol <- fast99(model = kriging.mean, factors = 2, n = 1000,
q = "qunif", q.arg = list(min = -5, max = 5))
msobol <- fast99(model = kmodel, factors = 2, n = 1000,
q = "qunif", q.arg = list(min = -5, max = 5))
kriging.mean <- function(Xnew,kmodel ){
pre_simple <- predict(kmodel, xnew,"SK",checkNames = FALSE)
m <- pre_simple$mean
return(m)
}
msobol <- fast99(model = kriging.mean, factors = 2, n = 1000,
q = "qunif", q.arg = list(min = -5, max = 5))
kriging.mean <- function(Xnew,kmodel ){
pre_simple <- predict(kmodel, xnew,"SK")
m <- pre_simple$mean
return(m)
msobol <- fast99(model = kriging.mean, factors = 2, n = 1000,
q = "qunif", q.arg = list(min = -5, max = 5))
plot(msobol)
doeBANDE4D <- read.csv("doeBANDE4D.csv",header = TRUE, sep = ";")
colmeans4D <- colMeans(doeBANDE4D)
doeBANDE4D <- read.csv("doeBANDE4D.csv",header = TRUE, sep = ";")
print(doeBANDE4D)
